{"version":3,"sources":["components/WeatherInfo.js","components/WeatherContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","data","temp","humidity","city","desc","className","WeatherContainer","useState","searcQuery","setSearchQuery","weatherData","setWeatherData","setIsValidCityName","convertToSantigrad","toFixed","placeholder","onChange","e","CityName","target","value","isValid","onClick","fetch","then","res","json","main","weather","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA0BeA,G,KAvBK,SAAC,GAA8C,IAAD,IAA3CC,KAAQC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,KACnD,OACE,oCACE,4BAAKA,GACL,6BAASC,UAAU,qBAClB,yBAAKA,UAAU,sBACd,oCACA,2BAAIF,IAEN,yBAAKE,UAAU,sBACb,2CACA,2BAAIJ,EAAK,0BAAMI,UAAU,iBAAhB,OAEX,yBAAKA,UAAU,sBACb,wCACA,2BAAIH,EAAJ,UCyDOI,EAxEU,WACvB,IAD6B,EAEQC,mBAAS,IAFjB,mBAEtBC,EAFsB,KAEVC,EAFU,OAGSF,mBAAS,CAC7CN,KAAM,KACNC,SAAU,KACVE,KAAM,KACND,KAAM,OAPqB,mBAGtBO,EAHsB,KAGTC,EAHS,OAUiBJ,oBAAS,GAV1B,mBAULK,GAVK,WAyCtBC,EAAqB,SAACZ,GAC1B,OAAOA,EAAO,QAAQa,QAAQ,IAGjC,OACE,6BAAST,UAAU,qBACjB,4BAAQA,UAAU,kBAChB,uCACA,6BACE,2BACEU,YAAY,YACZV,UAAU,eACVW,SAzCgB,SAAAC,GACxB,IAAIC,EAAWD,EAAEE,OAAOC,MACpBC,EAAUT,EAAmBM,GACjCT,EAAeS,GAEbN,KADES,GAAwB,KAAbH,OAuCT,4BAAQI,QAzBO,WACrBC,MAAM,qDAAD,OAAsDf,EAAtD,qBA9BS,qCA+BbgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAxB,GAAI,OAAIW,EAAe,CAC7BV,KAAMY,EAAmBb,EAAK2B,KAAK1B,MACnCC,SAAUF,EAAK2B,KAAKzB,SACpBE,KAAMJ,EAAK4B,QAAQ,GAAGD,KACtBxB,KAAMH,EAAK6B,WAkB4BxB,UAAU,kBAA3C,YAIJ,6BAASA,UAAU,gBACK,OAArBK,EAAYT,KACX,mDACuB,uBAAGI,UAAU,kBAAb,aAGzB,kBAAC,EAAD,CAAaL,KAAMU,OCxDZoB,MARf,WACE,OACE,6BAASzB,UAAU,iBACnB,kBAAC,EAAD,QCKgB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.46a04052.chunk.js","sourcesContent":["import React from \"react\";\nimport '../styles/Weather.css';\n\nconst WeatherInfo = ({ data: { temp, humidity, city, desc } }) => {\n  return (\n    <>\n      <h3>{desc}</h3>\n      <section className=\"weather-data-flex\">\n       <div className=\"header-description\">\n        <h4>City</h4>\n        <p>{city}</p>\n      </div>\n      <div className=\"header-description\">\n        <h4>Temperature</h4>\n        <p>{temp}<span className=\"degree-symbol\">C</span></p>\n      </div>\n      <div className=\"header-description\">\n        <h4>Humidity</h4>\n        <p>{humidity}%</p>\n      </div>   \n      </section>\n      \n    </>\n  );\n};\n\nexport default WeatherInfo;\n","import React, { useState } from \"react\";\nimport \"../styles/Weather.css\";\nimport WeatherInfo from \"./WeatherInfo\";\nconst WeatherContainer = () => {\n  const API_KEY = \"e84884dd9d2c8f8b8265ab8dbfc002a4\";\n  const [searcQuery, setSearchQuery] = useState(\"\");\n  const [weatherData, setWeatherData] = useState({\n    temp: null,\n    humidity: null,\n    desc: null,\n    city: null\n  });\n\n  const [isValidCityName, setIsValidCityName] = useState(true);\n\n  const updateSearchQuery = e => {\n    let CityName = e.target.value;\n    let isValid = setIsValidCityName(CityName);\n    setSearchQuery(CityName);\n    if (isValid || CityName === \"\" ) {\n      setIsValidCityName(true);\n    } else {\n      setIsValidCityName(false);\n    }\n  };\n\n  const validateCityName = CityName => {\n    // let regex = /[0-9]{5}/;\n    let regex = /[A-Za-z0-9]/;\n    return regex.test(CityName);\n  };\n\n//// get data(weather information) from openweathermap.org ////\n  const getWeatherData = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searcQuery},nl&appid=${API_KEY}`)\n    .then(res => res.json())\n    .then(data => setWeatherData({\n    temp: convertToSantigrad(data.main.temp),\n    humidity: data.main.humidity,\n    desc: data.weather[0].main,\n    city: data.name\n    }))\n  }\n  // kelvein to santigrad //\n   const convertToSantigrad = (temp) => {\n     return(temp - 273.15).toFixed(0);\n   }\n\n  return (\n    <section className=\"weather-container\">\n      <header className=\"weather-header\">\n        <h3>Weather</h3>\n        <div>\n          <input\n            placeholder=\"City Name\"\n            className=\"search-input\"\n            onChange={updateSearchQuery}\n          />\n          <button onClick={getWeatherData} className=\"material-icons\">search</button>\n        </div>\n      </header>\n      {/* <p className=\"error\">{isValidCityName === true ? \"\" : \"Invalid City\"}</p> */}\n      <section className=\"weather-info\">\n        {weatherData.temp === null ? (\n          <p>\n            No Weather to Display<i className=\"material-icons\">wb_sunny</i>\n          </p>\n        ) : (\n        <WeatherInfo data={weatherData} />\n        )}\n      </section>\n    </section>\n  );\n};\n\nexport default WeatherContainer;\n","import React from 'react';\nimport '../styles/App.css';\nimport WeatherContainer from \"./WeatherContainer\";\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n    <WeatherContainer />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}